[{"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/App.js":"1","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/Login.js":"2","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/reportWebVitals.js":"3","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/FilterSort.js":"4","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/ExpenseDetail.js":"5","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/EditAccount.js":"6","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/ExpenseCard.js":"7","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/NotePad.js":"8","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/Header.js":"9","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/SignUp.js":"10"},{"size":4453,"mtime":1613507457000,"results":"11","hashOfConfig":"12"},{"size":2734,"mtime":1613527681000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1612993075000,"results":"14","hashOfConfig":"12"},{"size":392,"mtime":1612993075000,"results":"15","hashOfConfig":"12"},{"size":1281,"mtime":1613533329000,"results":"16","hashOfConfig":"12"},{"size":2329,"mtime":1613275486000,"results":"17","hashOfConfig":"12"},{"size":1316,"mtime":1613535689000,"results":"18","hashOfConfig":"12"},{"size":5456,"mtime":1613511188000,"results":"19","hashOfConfig":"12"},{"size":3574,"mtime":1613534649000,"results":"20","hashOfConfig":"12"},{"size":3097,"mtime":1613528858000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xrbhpo",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/App.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/Login.js",["44"],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/reportWebVitals.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/FilterSort.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/ExpenseDetail.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/EditAccount.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/ExpenseCard.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/NotePad.js",["45","46","47","48","49","50","51","52","53","54"],"import React from 'react'\n\nfunction NotePad( {isLoaded}) {\n\n    class Model {\n        constructor() {\n            this.notes = []    \n        }\n        \n    }\n    \n    var model = new Model();\n    \n    class View extends React.Component {\n      \n      constructor() {\n        super();\n        // Set initial state\n        this.state = {\n          inputText: '',\n          color: 'green',\n          alert: ''\n        };\n    \n      }\n      \n      render() {\n        // Create list of notes\n        let list = model.notes.map(function(note) {\n          if(note.id != null) {\n            return (<div>\n              <div className={note.bgColor + ' note-box alert col-md-11'}>\n                {note.content}  \n              </div>\n              <div className=\"col-md-1 text-center\">\n                <button className=\"delete btn btn-default\" onClick={this.handleDeleteNote.bind(this, note.id)} >&times;</button>\n              </div>\n          </div>)\n          }\n        }, this);\n        \n        // Render app content\n        return <div>\n          <div className=\"panel panel-default\">\n          <div className=\"panel-body\">\n          <form className=\"form-group\">\n            <label for=\"note-add\">Add New Note</label>\n            <input \n              id=\"note-add\" \n              className=\"form-control\" \n              type=\"text\"\n              value={this.state.inputText}\n              placeholder=\"Type note here\"\n              onChange={this.handleInputText.bind(this)}\n              />\n            <label for=\"select-color\" >Select Color</label>\n            <div id=\"select-color\">\n              <input className=\"color-radio\" type=\"radio\" onClick={this.selectGreen.bind(this)} checked={this.state.color == 'green' ? 'checked' : '' } /> Green &nbsp;\n              <input className=\"color-radio\" type=\"radio\" onClick={this.selectRed.bind(this)} checked={this.state.color == 'red' ? 'checked' : '' } /> Red &nbsp;\n              <input className=\"color-radio\" type=\"radio\" onClick={this.selectBlue.bind(this)} checked={this.state.color == 'blue' ? 'checked' : '' } /> Blue &nbsp;\n              <input className=\"color-radio\" type=\"radio\" onClick={this.selectOrange.bind(this)} checked={this.state.color == 'orange' ? 'checked' : '' } /> Orange &nbsp;\n            </div>\n          </form>\n            <button className=\"btn btn-success\" onClick={this.handleAddNote.bind(this)} >Add Note</button>\n            <span className=\"alerts\">{this.state.alert}</span>\n        </div>\n            </div>\n        <h3 className=\"text-center\">Notes</h3>\n          <hr />\n          <div>\n            {model.notes.length === 0 ? <h3>No Notes</h3> : list}\n          </div>\n        </div>\n      }\n      \n      // Update state of input text\n      handleInputText(e) {\n        this.setState({inputText: e.target.value})\n      }\n      \n      // Add new note\n      handleAddNote() {\n    \n         // Add note if input is not blank\n         if(this.state.inputText != '') {\n          controller.addNote({\n            content: this.state.inputText,\n            bgColor: this.state.color\n          });\n         }\n        \n         // Update component state\n         this.setState({\n           inputText: ''\n         });\n        \n         // Show note successfully added alert\n         if(this.state.inputText != '') {\n           // Show success alert message\n           this.showAddAlert();\n         }  \n        \n      }\n      \n      // Delete a note\n      handleDeleteNote(id) {\n          \n        controller.deleteNote(id);\n          \n        this.showDeleteAlert();\n        \n      }\n      \n      showAddAlert() {\n        this.setState({alert: 'Note Added!'})\n        \n        let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n      }\n          \n      showDeleteAlert() {\n        this.setState({alert: 'Note Deleted!'})\n        \n        let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n      }\n     \n      hideAlert() {\n        this.setState({alert: ''})\n      }\n      \n      // Set new note background color to green - default\n      selectGreen() {\n        this.setState({color: 'green'})\n      }\n      \n      // Set new note background color to red\n      selectRed() {\n        this.setState({color: 'red'})\n      }\n      \n      // Set new note background color to blue\n      selectBlue() {\n        this.setState({color: 'blue'})\n      }\n      \n      // Set new note background color to orange\n      selectOrange() {\n        this.setState({color: 'orange'})\n      }\n     \n    }\n    \n    class Controller {\n        addNote(newNote) {\n            newNote.id = (model.notes.length + 1);\n            model.notes.push(newNote);\n        }\n        \n        deleteNote(id) {\n            let new_notes = [];\n            for(let i = 0; i < model.notes.length; i++ ) {\n              if(model.notes[i]['id'] == id) {\n                // do nothing\n              } else {\n                new_notes.push(model.notes[i]);\n              }\n            }\n            model.notes = new_notes;\n        }\n    }\n    \n    var controller = new Controller();\n  \n      \n    return(\n        <>\n        <div className=\"container \">\n            <div className=\"row \">\n                <div className=\"col-md-12 text-center\">\n                <h1>Notepad</h1>\n                </div>\n                    <div className=\"col-md-6 col-md-offset-3\" id=\"app\">\n                        <View></View>\n            </div>\n        </div>\n    </div>\n\n        </>\n    )\n}\n\n\nexport default NotePad","/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/Header.js",[],"/Users/DavidMedina/Development/Flatiron/code/Phase5/BudEx-frontend/src/SignUp.js",["55"],"import React, {useState} from 'react'\n\n\n\n\nfunction SignUp({handleSignUp}) {\n\n    const[firstName, setFirstName] = useState(\"\")\n    const[lastName, setLastName] = useState(\"\")\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [monthlyIncome, setMonthlyIncome] = useState(\"\")\n    const [errors, setErrors] = useState(\"\")\n\n    function handleSignForm(e){\n    \n        e.preventDefault();\n        const formData = { \n            first_name: firstName, \n            last_name:lastName,\n            username: username,\n            password: password,\n            monthly_income:monthlyIncome,\n        }\n        console.log(formData)\n    \n        fetch(\"http://localhost:3000/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        })\n          .then((r) => r.json())\n          .then((data) => {\n            // then set that user in state in our App component\n            console.log(data.user)\n            if (data.user) {\n                handleSignUp(data.user)\n                localStorage.setItem(\"token\", data.token)\n            } else {\n                console.log(data)\n                setErrors(data.error)\n              // alert('Incorret username or password')\n            }\n          });\n    }\n\n    return (\n        <div className=\"signup\">\n        <form className=\"signup-form\"onSubmit={handleSignForm}>\n         <h1>Create an Account</h1>\n         <br />\n         <input\n            className=\"signup-input\"\n            placeholder=\"First Name\"\n             type=\"text\"\n             value={firstName}\n             onChange={(e) => setFirstName(e.target.value)}\n         />\n        <br />\n        <br />\n        <br />\n        <br />\n         <input \n            className=\"signup-input\"\n             placeholder=\"Last Name\"\n             type=\"text\"\n             value={lastName}\n             onChange={(e) => setLastName(e.target.value)}\n         />\n         <br /> \n         <br />\n         <br />\n         <br />\n         <input \n            className=\"signup-input\"\n            placeholder=\"Username\"\n             type=\"text\"\n             value={username}\n             onChange={(e) => setUsername(e.target.value)}\n         />\n         <br />\n         <br /> \n         <br /> \n         <br />  \n         <input \n            className=\"signup-input\"\n            placeholder=\"Password\"\n             type=\"password\"\n             value={password}\n             onChange={(e) => setPassword(e.target.value)}\n         />\n         <br /> \n         <br />\n         <br /> \n         <br /> \n         <input \n            className=\"signup-input\"\n            placeholder=\"Monthly income after taxes\"\n             type=\"text\"\n             value={monthlyIncome}\n             onChange={(e) => setMonthlyIncome(e.target.value)}\n         />\n         <br /> \n         <br /> \n         <br /> \n         <input className=\"signup-button\" type=\"submit\" value=\"Submit\" />\n        </form>\n    </div>\n       \n    )\n}\n\n\nexport default SignUp",{"ruleId":"56","severity":1,"message":"57","line":11,"column":12,"nodeType":"58","messageId":"59","endLine":11,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":29,"column":36,"nodeType":"62","messageId":"63","endLine":29,"endColumn":44},{"ruleId":"64","severity":1,"message":"65","line":58,"column":123,"nodeType":"66","messageId":"67","endLine":58,"endColumn":125},{"ruleId":"64","severity":1,"message":"65","line":59,"column":121,"nodeType":"66","messageId":"67","endLine":59,"endColumn":123},{"ruleId":"64","severity":1,"message":"65","line":60,"column":122,"nodeType":"66","messageId":"67","endLine":60,"endColumn":124},{"ruleId":"64","severity":1,"message":"65","line":61,"column":124,"nodeType":"66","messageId":"67","endLine":61,"endColumn":126},{"ruleId":"64","severity":1,"message":"68","line":85,"column":34,"nodeType":"66","messageId":"67","endLine":85,"endColumn":36},{"ruleId":"64","severity":1,"message":"68","line":98,"column":34,"nodeType":"66","messageId":"67","endLine":98,"endColumn":36},{"ruleId":"56","severity":1,"message":"69","line":117,"column":13,"nodeType":"58","messageId":"59","endLine":117,"endColumn":22},{"ruleId":"56","severity":1,"message":"69","line":123,"column":13,"nodeType":"58","messageId":"59","endLine":123,"endColumn":22},{"ruleId":"64","severity":1,"message":"65","line":161,"column":39,"nodeType":"66","messageId":"67","endLine":161,"endColumn":41},{"ruleId":"56","severity":1,"message":"57","line":13,"column":12,"nodeType":"58","messageId":"59","endLine":13,"endColumn":18},"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'hideAlert' is assigned a value but never used."]